/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os) */

(* top =  1  *)
(* src = "input/ctrl.v:1" *)
module top(\opcode[0] , \opcode[1] , \opcode[2] , \opcode[3] , \opcode[4] , \op_ext[0] , \op_ext[1] , \sel_reg_dst[0] , \sel_reg_dst[1] , \sel_alu_opB[0] , \sel_alu_opB[1] , \alu_op[0] , \alu_op[1] , \alu_op[2] , \alu_op_ext[0] , \alu_op_ext[1] , \alu_op_ext[2] , \alu_op_ext[3] , halt, reg_write, sel_pc_opA, sel_pc_opB, beqz, bnez, bgez, bltz, jump, Cin, invA, invB, sign, mem_write, sel_wb);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  (* src = "input/ctrl.v:11" *)
  output Cin;
  (* src = "input/ctrl.v:11" *)
  output \alu_op[0] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op[1] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op[2] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op_ext[0] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op_ext[1] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op_ext[2] ;
  (* src = "input/ctrl.v:11" *)
  output \alu_op_ext[3] ;
  (* src = "input/ctrl.v:11" *)
  output beqz;
  (* src = "input/ctrl.v:11" *)
  output bgez;
  (* src = "input/ctrl.v:11" *)
  output bltz;
  (* src = "input/ctrl.v:11" *)
  output bnez;
  (* src = "input/ctrl.v:11" *)
  output halt;
  (* src = "input/ctrl.v:11" *)
  output invA;
  (* src = "input/ctrl.v:11" *)
  output invB;
  (* src = "input/ctrl.v:11" *)
  output jump;
  (* src = "input/ctrl.v:11" *)
  output mem_write;
  (* src = "input/ctrl.v:9" *)
  input \op_ext[0] ;
  (* src = "input/ctrl.v:9" *)
  input \op_ext[1] ;
  (* src = "input/ctrl.v:9" *)
  input \opcode[0] ;
  (* src = "input/ctrl.v:9" *)
  input \opcode[1] ;
  (* src = "input/ctrl.v:9" *)
  input \opcode[2] ;
  (* src = "input/ctrl.v:9" *)
  input \opcode[3] ;
  (* src = "input/ctrl.v:9" *)
  input \opcode[4] ;
  (* src = "input/ctrl.v:11" *)
  output reg_write;
  (* src = "input/ctrl.v:11" *)
  output \sel_alu_opB[0] ;
  (* src = "input/ctrl.v:11" *)
  output \sel_alu_opB[1] ;
  (* src = "input/ctrl.v:11" *)
  output sel_pc_opA;
  (* src = "input/ctrl.v:11" *)
  output sel_pc_opB;
  (* src = "input/ctrl.v:11" *)
  output \sel_reg_dst[0] ;
  (* src = "input/ctrl.v:11" *)
  output \sel_reg_dst[1] ;
  (* src = "input/ctrl.v:11" *)
  output sel_wb;
  (* src = "input/ctrl.v:11" *)
  output sign;
  assign _009_ = ~\opcode[3] ;
  assign _010_ = _009_ & \opcode[4] ;
  assign _011_ = ~(\opcode[1]  | \opcode[4] );
  assign _012_ = ~\opcode[2] ;
  assign _013_ = ~\opcode[4] ;
  assign _014_ = \opcode[3]  & _013_;
  assign _015_ = _014_ | _012_;
  assign _016_ = _015_ | _011_;
  assign _017_ = ~(\opcode[1]  | \opcode[0] );
  assign _018_ = ~(\opcode[3]  & \opcode[4] );
  assign _019_ = _018_ | \opcode[2] ;
  assign \sel_reg_dst[0]  = ~((_019_ | _017_) & (_016_ | _010_));
  assign _020_ = ~(\opcode[3]  | \opcode[4] );
  assign jump = _020_ & \opcode[2] ;
  assign _021_ = ~(jump & \opcode[1] );
  assign _022_ = \opcode[3]  | _013_;
  assign _023_ = _022_ & \opcode[1] ;
  assign _024_ = ~\opcode[1] ;
  assign _025_ = _024_ & \opcode[0] ;
  assign _026_ = _018_ & _024_;
  assign _027_ = _026_ | \opcode[2] ;
  assign _028_ = _027_ | _025_;
  assign \sel_reg_dst[1]  = ~((_028_ | _023_) & _021_);
  assign _029_ = _009_ | \opcode[4] ;
  assign _030_ = ~(\opcode[1]  & \opcode[0] );
  assign _031_ = ~_030_;
  assign _032_ = _031_ | _023_;
  assign \sel_alu_opB[0]  = ~((_032_ & _029_) | _028_);
  assign _033_ = _011_ | _009_;
  assign _034_ = ~(_033_ | _017_);
  assign _035_ = _020_ | \opcode[2] ;
  assign \sel_alu_opB[1]  = ~((_035_ | _034_) & (_022_ | _012_));
  assign _036_ = ~\op_ext[0] ;
  assign _037_ = _018_ | _036_;
  assign _038_ = _024_ | \opcode[0] ;
  assign _039_ = _038_ | _037_;
  assign _040_ = _036_ & \opcode[4] ;
  assign _041_ = _030_ | _009_;
  assign _042_ = ~(_041_ | _040_);
  assign _043_ = _014_ | \op_ext[1] ;
  assign _044_ = ~((_043_ & _042_) | \opcode[2] );
  assign _045_ = ~\opcode[0] ;
  assign _046_ = _022_ | _045_;
  assign \alu_op[0]  = ~((_046_ & \opcode[2] ) | (_044_ & _039_));
  assign _047_ = _029_ & _012_;
  assign _048_ = ~(\op_ext[1]  & \opcode[3] );
  assign _049_ = _022_ & \opcode[2] ;
  assign _050_ = _049_ | _024_;
  assign \alu_op[1]  = ~((_048_ & _047_) | _050_);
  assign _051_ = \opcode[3]  & \opcode[4] ;
  assign _052_ = _030_ & _051_;
  assign \alu_op[2]  = ~((_052_ | _035_) & (_018_ | _012_));
  assign _053_ = _018_ | _012_;
  assign _054_ = _017_ & _012_;
  assign _055_ = ~((_054_ & _051_) | (jump & \opcode[1] ));
  assign \alu_op_ext[0]  = ~((_053_ | _045_) & _055_);
  assign _056_ = _010_ | _024_;
  assign _057_ = _022_ | \opcode[2] ;
  assign \alu_op_ext[1]  = ~((_057_ | _038_) & (_056_ | _015_));
  assign \alu_op_ext[2]  = ~((_032_ | _027_) & _021_);
  assign _058_ = ~_020_;
  assign _059_ = ~((_026_ & _058_) | \opcode[2] );
  assign _060_ = _046_ & _009_;
  assign \alu_op_ext[3]  = ~((_060_ | _050_) & (_059_ | _049_));
  assign halt = _054_ & _020_;
  assign _061_ = _017_ & _009_;
  assign reg_write = ~((_061_ | _035_) & _016_);
  assign sel_pc_opA = jump & \opcode[0] ;
  assign sel_pc_opB = jump & _045_;
  assign _000_ = _014_ & \opcode[2] ;
  assign beqz = _000_ & _017_;
  assign _001_ = ~(_025_ & _014_);
  assign bnez = ~(_001_ | _012_);
  assign bgez = _000_ & _031_;
  assign _002_ = ~_038_;
  assign bltz = _000_ & _002_;
  assign _003_ = ~((_041_ | _040_) & _001_);
  assign Cin = \opcode[2]  ? _052_ : _003_;
  assign _004_ = _030_ | \op_ext[1] ;
  assign _005_ = _004_ | _037_;
  assign invA = ~((_005_ & _001_) | \opcode[2] );
  assign _006_ = ~(_052_ | _012_);
  assign invB = ~(_006_ | _044_);
  assign _007_ = _010_ & _012_;
  assign _008_ = _031_ | _017_;
  assign mem_write = _008_ & _007_;
  assign sel_wb = _007_ & _025_;
  assign sign = 1'b1;
endmodule
