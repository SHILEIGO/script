/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os) */

(* top =  1  *)
(* src = "input/sddac.v:13" *)
module sddac(clk, rst_n, sig_in, sd_out);
  (* src = "input/sddac.v:51" *)
  wire [7:0] _000_;
  (* src = "input/sddac.v:51" *)
  wire _001_;
  (* src = "input/sddac.v:51" *)
  wire [17:0] _002_;
  (* src = "input/sddac.v:51" *)
  wire [19:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  (* src = "input/sddac.v:16" *)
  input clk;
  (* init = 8'bxxx00000 *)
  (* src = "input/sddac.v:30" *)
  wire [7:0] lfsr_reg;
  (* init = 21'b0xxxxxx00000000000000 *)
  (* src = "input/sddac.v:28" *)
  wire [20:0] quant_in;
  (* src = "input/sddac.v:17" *)
  input rst_n;
  (* init = 1'b0 *)
  (* src = "input/sddac.v:21" *)
  output sd_out;
  reg sd_out;
  initial sd_out = 1'b0;
  (* src = "input/sddac.v:18" *)
  input [15:0] sig_in;
  (* init = 18'b000000000000000000 *)
  (* src = "input/sddac.v:24" *)
  reg [17:0] state1;
  initial state1 = 18'b000000000000000000;
  (* init = 20'b00000000000000000000 *)
  (* src = "input/sddac.v:25" *)
  reg [19:0] state2;
  initial state2 = 20'b00000000000000000000;
  assign _004_ = ~(state2[14] ^ state1[14]);
  assign _005_ = state2[13] & state1[13];
  assign _006_ = state2[13] | state1[13];
  assign _007_ = ~(state2[12] & state1[12]);
  assign _008_ = ~(state2[12] ^ state1[12]);
  assign _009_ = state2[11] & state1[11];
  assign _010_ = state2[11] | state1[11];
  assign _011_ = ~(state2[10] & state1[10]);
  assign _012_ = ~(state2[10] ^ state1[10]);
  assign _013_ = state2[9] & state1[9];
  assign _014_ = state2[9] | state1[9];
  assign _015_ = ~(state2[8] & state1[8]);
  assign _016_ = ~(state2[8] ^ state1[8]);
  assign _017_ = state2[7] & state1[7];
  assign _018_ = state2[7] | state1[7];
  assign _019_ = ~(state2[6] & state1[6]);
  assign _020_ = ~(state2[6] | state1[6]);
  assign _021_ = state2[5] & state1[5];
  assign _022_ = ~(state2[4] & state1[4]);
  assign _023_ = ~(state2[4] ^ state1[4]);
  assign _024_ = state2[3] & state1[3];
  assign _025_ = state2[3] | state1[3];
  assign _026_ = ~(state2[2] & state1[2]);
  assign _027_ = state2[1] & state1[1];
  assign _028_ = state2[0] & state1[0];
  assign _029_ = state2[1] ^ state1[1];
  assign _030_ = ~((_029_ & _028_) | _027_);
  assign _031_ = ~(state2[2] ^ state1[2]);
  assign _032_ = ~((_031_ | _030_) & _026_);
  assign _033_ = ~((_032_ & _025_) | _024_);
  assign _034_ = ~((_033_ | _023_) & _022_);
  assign _035_ = state2[5] | state1[5];
  assign _036_ = ~((_035_ & _034_) | _021_);
  assign _037_ = ~((_036_ | _020_) & _019_);
  assign _038_ = ~((_037_ & _018_) | _017_);
  assign _039_ = ~((_038_ | _016_) & _015_);
  assign _040_ = ~((_039_ & _014_) | _013_);
  assign _041_ = ~((_040_ | _012_) & _011_);
  assign _042_ = ~((_041_ & _010_) | _009_);
  assign _043_ = ~((_042_ | _008_) & _007_);
  assign _044_ = ~((_043_ & _006_) | _005_);
  assign _045_ = _044_ | _004_;
  assign _046_ = ~rst_n;
  assign _047_ = ~((_044_ & _004_) | _046_);
  assign _003_[14] = _047_ & _045_;
  assign _048_ = ~(state2[14] & state1[14]);
  assign _049_ = ~((_044_ | _004_) & _048_);
  assign _050_ = state2[15] & state1[15];
  assign _051_ = ~_050_;
  assign _052_ = state2[15] | state1[15];
  assign _053_ = _052_ & _051_;
  assign _054_ = _053_ ^ _049_;
  assign _003_[15] = _054_ & rst_n;
  assign _055_ = state2[16] ^ state1[16];
  assign _056_ = ~((_050_ | _049_) & _052_);
  assign _057_ = _056_ | _055_;
  assign _058_ = ~((_056_ & _055_) | _046_);
  assign _003_[16] = _058_ & _057_;
  assign _059_ = ~state2[16];
  assign _060_ = _059_ | state1[16];
  assign _061_ = ~((_056_ | _055_) & _060_);
  assign _062_ = ~state2[17];
  assign _063_ = ~state1[16];
  assign _064_ = ~state2[15];
  assign _065_ = ~state2[19];
  assign _066_ = ~(lfsr_reg[4] ^ lfsr_reg[2]);
  assign _067_ = state2[16] & state2[14];
  assign _068_ = state2[18] & state2[17];
  assign _069_ = _068_ & _067_;
  assign _070_ = ~((_069_ & _066_) | _065_);
  assign _071_ = state2[16] | state2[14];
  assign _072_ = state2[18] | state2[17];
  assign _073_ = _072_ | _071_;
  assign _074_ = ~((_073_ | _066_) & _065_);
  assign _075_ = ~((_070_ | _064_) & _074_);
  assign _076_ = _075_ ^ state1[17];
  assign _077_ = _076_ ^ _063_;
  assign _078_ = _077_ ^ _062_;
  assign _079_ = ~((_078_ | _061_) & rst_n);
  assign _003_[17] = ~((_078_ & _061_) | _079_);
  assign _080_ = ~(_077_ | _062_);
  assign _081_ = ~((_078_ & _061_) | _080_);
  assign _082_ = _075_ & state1[17];
  assign _083_ = ~((_076_ & _063_) | _082_);
  assign _084_ = _083_ ^ state2[18];
  assign _085_ = _084_ | _081_;
  assign _086_ = ~((_084_ & _081_) | _046_);
  assign _003_[18] = _086_ & _085_;
  assign _087_ = ~state2[18];
  assign _088_ = _083_ | _087_;
  assign _089_ = ~((_084_ | _081_) & _088_);
  assign _090_ = _083_ ^ _065_;
  assign _091_ = _090_ | _089_;
  assign _092_ = ~((_090_ & _089_) | _046_);
  assign _003_[19] = _092_ & _091_;
  assign _093_ = ~((sig_in[0] | state1[0]) & rst_n);
  assign _002_[0] = ~((sig_in[0] & state1[0]) | _093_);
  assign _094_ = ~(sig_in[0] & state1[0]);
  assign _095_ = ~(sig_in[1] ^ state1[1]);
  assign _096_ = _095_ | _094_;
  assign _097_ = ~((_095_ & _094_) | _046_);
  assign _002_[1] = _097_ & _096_;
  assign _098_ = ~(sig_in[1] & state1[1]);
  assign _099_ = _096_ & _098_;
  assign _100_ = ~(sig_in[2] ^ state1[2]);
  assign _101_ = _100_ | _099_;
  assign _102_ = ~((_100_ & _099_) | _046_);
  assign _002_[2] = _102_ & _101_;
  assign _103_ = ~(sig_in[2] & state1[2]);
  assign _104_ = ~(_101_ & _103_);
  assign _105_ = ~_104_;
  assign _106_ = ~(sig_in[3] ^ state1[3]);
  assign _107_ = _106_ | _105_;
  assign _108_ = ~((_106_ & _105_) | _046_);
  assign _002_[3] = _108_ & _107_;
  assign _109_ = sig_in[3] & state1[3];
  assign _110_ = sig_in[3] | state1[3];
  assign _111_ = ~((_110_ & _104_) | _109_);
  assign _112_ = ~(sig_in[4] ^ state1[4]);
  assign _113_ = _112_ | _111_;
  assign _114_ = ~((_112_ & _111_) | _046_);
  assign _002_[4] = _114_ & _113_;
  assign _115_ = ~(sig_in[4] & state1[4]);
  assign _116_ = ~((_112_ | _111_) & _115_);
  assign _117_ = ~_116_;
  assign _118_ = ~(sig_in[5] ^ state1[5]);
  assign _119_ = _118_ | _117_;
  assign _120_ = ~((_118_ & _117_) | _046_);
  assign _002_[5] = _120_ & _119_;
  assign _121_ = sig_in[5] & state1[5];
  assign _122_ = sig_in[5] | state1[5];
  assign _123_ = ~((_122_ & _116_) | _121_);
  assign _124_ = ~(sig_in[6] ^ state1[6]);
  assign _125_ = _124_ | _123_;
  assign _126_ = ~((_124_ & _123_) | _046_);
  assign _002_[6] = _126_ & _125_;
  assign _127_ = ~(sig_in[6] & state1[6]);
  assign _128_ = ~((_124_ | _123_) & _127_);
  assign _129_ = sig_in[7] & state1[7];
  assign _130_ = ~_129_;
  assign _131_ = sig_in[7] | state1[7];
  assign _132_ = _131_ & _130_;
  assign _133_ = _132_ ^ _128_;
  assign _002_[7] = _133_ & rst_n;
  assign _134_ = ~(sig_in[8] ^ state1[8]);
  assign _135_ = ~((_131_ & _128_) | _129_);
  assign _136_ = _135_ | _134_;
  assign _137_ = ~((_135_ & _134_) | _046_);
  assign _002_[8] = _137_ & _136_;
  assign _138_ = ~(sig_in[8] & state1[8]);
  assign _139_ = ~((_135_ | _134_) & _138_);
  assign _140_ = sig_in[9] & state1[9];
  assign _141_ = ~_140_;
  assign _142_ = sig_in[9] | state1[9];
  assign _143_ = _142_ & _141_;
  assign _144_ = _143_ ^ _139_;
  assign _002_[9] = _144_ & rst_n;
  assign _145_ = ~(sig_in[10] ^ state1[10]);
  assign _146_ = ~((_142_ & _139_) | _140_);
  assign _147_ = _146_ | _145_;
  assign _148_ = ~((_146_ & _145_) | _046_);
  assign _002_[10] = _148_ & _147_;
  assign _149_ = ~(sig_in[10] & state1[10]);
  assign _150_ = ~((_146_ | _145_) & _149_);
  assign _151_ = sig_in[11] & state1[11];
  assign _152_ = ~_151_;
  assign _153_ = sig_in[11] | state1[11];
  assign _154_ = _153_ & _152_;
  assign _155_ = _154_ ^ _150_;
  assign _002_[11] = _155_ & rst_n;
  assign _156_ = ~(sig_in[12] ^ state1[12]);
  assign _157_ = ~((_151_ | _150_) & _153_);
  assign _158_ = _157_ | _156_;
  assign _159_ = ~((_157_ & _156_) | _046_);
  assign _002_[12] = _159_ & _158_;
  assign _160_ = ~(sig_in[12] & state1[12]);
  assign _161_ = ~((_157_ | _156_) & _160_);
  assign _162_ = sig_in[13] & state1[13];
  assign _163_ = ~_162_;
  assign _164_ = sig_in[13] | state1[13];
  assign _165_ = _164_ & _163_;
  assign _166_ = _165_ ^ _161_;
  assign _002_[13] = _166_ & rst_n;
  assign _167_ = ~(sig_in[14] ^ state1[14]);
  assign _168_ = ~((_164_ & _161_) | _162_);
  assign _169_ = _168_ | _167_;
  assign _170_ = ~((_168_ & _167_) | _046_);
  assign _002_[14] = _170_ & _169_;
  assign _171_ = ~(sig_in[14] & state1[14]);
  assign _172_ = ~((_168_ | _167_) & _171_);
  assign _173_ = ~sig_in[15];
  assign _174_ = _173_ & state1[15];
  assign _175_ = ~_174_;
  assign _176_ = _173_ | state1[15];
  assign _177_ = _176_ & _175_;
  assign _178_ = _177_ ^ _172_;
  assign _002_[15] = _178_ & rst_n;
  assign _179_ = _075_ ^ _063_;
  assign _180_ = ~((_176_ & _172_) | _174_);
  assign _181_ = _180_ | _179_;
  assign _182_ = ~((_180_ & _179_) | _046_);
  assign _002_[16] = _182_ & _181_;
  assign _183_ = ~(_075_ & state1[16]);
  assign _184_ = ~((_180_ | _179_) & _183_);
  assign _185_ = _184_ | _076_;
  assign _186_ = ~((_184_ & _076_) | _046_);
  assign _002_[17] = _186_ & _185_;
  assign _000_[0] = ~(_066_ & rst_n);
  assign _000_[1] = lfsr_reg[0] | _046_;
  assign _000_[2] = lfsr_reg[1] | _046_;
  assign _000_[3] = lfsr_reg[2] | _046_;
  assign _000_[4] = lfsr_reg[3] | _046_;
  assign _001_ = _046_ ? sd_out : _075_;
  assign _187_ = ~((state2[0] | state1[0]) & rst_n);
  assign _003_[0] = ~(_187_ | _028_);
  assign _188_ = ~((_029_ | _028_) & rst_n);
  assign _003_[1] = ~((_029_ & _028_) | _188_);
  assign _189_ = _031_ | _030_;
  assign _190_ = ~((_031_ & _030_) | _046_);
  assign _003_[2] = _190_ & _189_;
  assign _191_ = ~_024_;
  assign _192_ = _025_ & _191_;
  assign _193_ = _192_ | _032_;
  assign _194_ = ~((_192_ & _032_) | _046_);
  assign _003_[3] = _194_ & _193_;
  assign _195_ = _033_ | _023_;
  assign _196_ = ~((_033_ & _023_) | _046_);
  assign _003_[4] = _196_ & _195_;
  assign _197_ = ~_034_;
  assign _198_ = ~(state2[5] ^ state1[5]);
  assign _199_ = ~((_198_ | _197_) & rst_n);
  assign _003_[5] = ~((_198_ & _197_) | _199_);
  assign _200_ = state2[6] ^ state1[6];
  assign _201_ = ~_036_;
  assign _202_ = ~((_201_ | _200_) & rst_n);
  assign _003_[6] = ~((_201_ & _200_) | _202_);
  assign _203_ = ~_017_;
  assign _204_ = _018_ & _203_;
  assign _205_ = _204_ ^ _037_;
  assign _003_[7] = _205_ & rst_n;
  assign _206_ = _038_ | _016_;
  assign _207_ = ~((_038_ & _016_) | _046_);
  assign _003_[8] = _207_ & _206_;
  assign _208_ = ~_013_;
  assign _209_ = _014_ & _208_;
  assign _210_ = _209_ ^ _039_;
  assign _003_[9] = _210_ & rst_n;
  assign _211_ = _040_ | _012_;
  assign _212_ = ~((_040_ & _012_) | _046_);
  assign _003_[10] = _212_ & _211_;
  assign _213_ = ~_009_;
  assign _214_ = _010_ & _213_;
  assign _215_ = _214_ ^ _041_;
  assign _003_[11] = _215_ & rst_n;
  assign _216_ = _042_ | _008_;
  assign _217_ = ~((_042_ & _008_) | _046_);
  assign _003_[12] = _217_ & _216_;
  assign _218_ = ~_005_;
  assign _219_ = _006_ & _218_;
  assign _220_ = _219_ ^ _043_;
  assign _003_[13] = _220_ & rst_n;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      sd_out <= _001_;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[0] <= _002_[0];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[1] <= _002_[1];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[2] <= _002_[2];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[3] <= _002_[3];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[4] <= _002_[4];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[5] <= _002_[5];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[6] <= _002_[6];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[7] <= _002_[7];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[8] <= _002_[8];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[9] <= _002_[9];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[10] <= _002_[10];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[11] <= _002_[11];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[12] <= _002_[12];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[13] <= _002_[13];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[14] <= _002_[14];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[15] <= _002_[15];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[16] <= _002_[16];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state1[17] <= _002_[17];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[0] <= _003_[0];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[1] <= _003_[1];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[2] <= _003_[2];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[3] <= _003_[3];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[4] <= _003_[4];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[5] <= _003_[5];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[6] <= _003_[6];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[7] <= _003_[7];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[8] <= _003_[8];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[9] <= _003_[9];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[10] <= _003_[10];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[11] <= _003_[11];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[12] <= _003_[12];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[13] <= _003_[13];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[14] <= _003_[14];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[15] <= _003_[15];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[16] <= _003_[16];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[17] <= _003_[17];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[18] <= _003_[18];
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      state2[19] <= _003_[19];
  reg \lfsr_reg_reg[0] ;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      \lfsr_reg_reg[0]  <= _000_[0];
  assign lfsr_reg[0] = \lfsr_reg_reg[0] ;
  reg \lfsr_reg_reg[1] ;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      \lfsr_reg_reg[1]  <= _000_[1];
  assign lfsr_reg[1] = \lfsr_reg_reg[1] ;
  reg \lfsr_reg_reg[2] ;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      \lfsr_reg_reg[2]  <= _000_[2];
  assign lfsr_reg[2] = \lfsr_reg_reg[2] ;
  reg \lfsr_reg_reg[3] ;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      \lfsr_reg_reg[3]  <= _000_[3];
  assign lfsr_reg[3] = \lfsr_reg_reg[3] ;
  reg \lfsr_reg_reg[4] ;
  (* src = "input/sddac.v:51" *)
  always @(posedge clk)
      \lfsr_reg_reg[4]  <= _000_[4];
  assign lfsr_reg[4] = \lfsr_reg_reg[4] ;
  assign lfsr_reg[7:5] = 3'b000;
  assign quant_in[19:0] = { 6'b000000, state2[13:0] };
endmodule
